package main

import (
	"fmt"
	"log"
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"gorm.io/gorm"

	AuthController "github.com/rainza999/fiber-test/controller/auth"
	"github.com/rainza999/fiber-test/db"
	model "github.com/rainza999/fiber-test/models"

	// LicenseController "github.com/rainza999/fiber-test/controller/license"
	"github.com/rainza999/fiber-test/routes"

	// "github.com/dgrijalva/jwt-go"

	"os"
	"path/filepath"
)

type Config struct {
	AllowOrigins []string
}

//go:generate go run build.go -ldflags="-w -s"
func main() {

	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Timezone ‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok (GMT+7)
	location, err := time.LoadLocation("Asia/Bangkok")
	if err != nil {
		log.Fatalf("Error loading location: %v", err)
	}
	time.Local = location // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Local timezone ‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok

	// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
	now := time.Now()
	log.Printf("Current time in GMT+7: %v", now)

	db.InitDB()

	// db.Db.AutoMigrate(&model.ActivationKey{})
	// LicenseController.GenerateActivationKeys(1000)
	// db.Db.AutoMigrate(&model.SettingPointOfSale{})
	// MigrateStockEntries(db.Db)
	// UpdateStockEntriesWithReceiptItems(db.Db)
	//‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÅ‡∏Ñ‡πà‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏±‡∏ö
	// MigrateStockEntrySoftDeleteAndRecreate(db.Db)
	// MigrateSupplierProductReceiptProductReceiptItem()
	// MigrateProductReceiptProductReceiptItem()
	// MigrateEmployeeAndUserData()
	// MigrateDivision(db.Db)
	// MigrateMenuAndPermissionData()
	// MigrateRole()
	// MigrateRoleHasPermission()
	// MigrateSettingTable(db.Db)
	// // MigrateVisitation()
	// MigrateProduct(db.Db)
	// MigrateCategory()
	// MigrateService(db.Db)
	// // MigrateStockLocation(db.Db)
	// MigrateStockEntry(db.Db)
	// MigrateSettingSystem(db.Db)
	// ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏Ç‡∏≠‡∏á Redis
	// AddStockForProduct(db.Db)
	// ‡πÄ‡∏û‡∏¥‡πà‡∏° stock entry ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ product_id = 3
	// if err := AddStockForProduct3(db.Db); err != nil {
	// 	fmt.Println("Failed to add stock entry:", err)
	// } else {
	// 	fmt.Println("Stock entry added successfully")
	// }

	// client := redis.NewClient(&redis.Options{
	// 	Addr:     "redis:6379",
	// 	Password: "", // ‡πÉ‡∏™‡πà password ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	// 	DB:       0,
	// })

	// ctx := context.Background()

	// ‡∏ó‡∏≥ caching

	// if err := Helper.GenerateCacheMenu(ctx, client); err != nil {
	// 	log.Fatal(err)
	// }

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏à‡∏≤‡∏Å Redis
	// cacheKey := "menus"
	// cacheData, err := client.Get(ctx, cacheKey).Result()
	// if err == redis.Nil {
	// 	fmt.Println("Cache not found")
	// } else if err != nil {
	// 	log.Fatal(err)
	// } else {
	// 	// ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Redis
	// 	var prettyJSON bytes.Buffer
	// 	err := json.Indent(&prettyJSON, []byte(cacheData), "", "  ")
	// 	if err != nil {
	// 		log.Fatal("Failed to format JSON:", err)
	// 	}
	// 	fmt.Println("Cache Data:")
	// 	fmt.Println(prettyJSON.String())
	// }
	app := fiber.New()

	app.Use(cors.New(cors.Config{
		// AllowOrigins: "http://localhost:5173, http://127.0.0.1:5173",
		AllowOrigins: "http://localhost:5173,http://127.0.0.1:5173,http://128.199.223.79,http://165.22.242.231,http://127.0.0.1", // ‡πÑ‡∏°‡πà‡∏°‡∏µ space ‡∏´‡∏•‡∏±‡∏á comma
		// AllowOrigins: "http://localhost:5173,http://127.0.0.1:5173,http://127.0.0.1", // ‡πÑ‡∏°‡πà‡∏°‡∏µ space ‡∏´‡∏•‡∏±‡∏á comma

		// AllowOrigins:     "*",
		AllowHeaders:     "Origin, Content-Type, Accept, Authorization",
		AllowCredentials: true,
	}))

	// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå "uploads"
	// app.Static("/uploads", "./uploads")
	// dir := filepath.Join(os.Args[0], "..", "resources", "uploads") // üëà ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì path ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏•‡∏±‡∏á build
	// fmt.Println(dir, " rainza 999")
	// app.Static("/uploads", dir)

	exePath, err := os.Executable()
	if err != nil {
		log.Fatal(err)
	}

	rootDir := filepath.Dir(exePath) // ‡πÑ‡∏î‡πâ path ‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ .exe ‡∏≠‡∏¢‡∏π‡πà

	// üëâ ‡∏ñ‡πâ‡∏≤ uploads ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö .exe
	uploadDir := filepath.Join(rootDir, "uploads")

	// üëâ ‡∏ñ‡πâ‡∏≤ uploads ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå resources ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö .exe
	// uploadDir := filepath.Join(rootDir, "resources", "uploads")

	fmt.Println("Upload Path:", uploadDir)

	app.Static("/uploads", uploadDir)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á *fiber.Ctx ‡∏à‡∏≤‡∏Å context ‡∏Ç‡∏≠‡∏á Fiber
	// c := app.AcquireCtx(&fasthttp.RequestCtx{})
	// c := *&fiber.Ctx{}
	// routes.Setup(app)
	routes.Setup(app)

	// Start server
	log.Fatal(app.Listen(":8000"))
	log.Fatal("rain start!")
}

// func authRequired(c *fiber.Ctx) error {
// 	cookie := c.Cookies("jwt")
// 	fmt.Println(cookie)
// 	fmt.Println("why dont have cookie")
// 	jwtSecretKey := []byte("your-secret-key")
// 	token, err := jwt.ParseWithClaims(cookie, &jwt.StandardClaims{}, func(token *jwt.Token) (interface{}, error) {
// 		return jwtSecretKey, nil
// 	})

// 	if err != nil || !token.Valid {
// 		fmt.Println(cookie)
// 		fmt.Println("hello error")
// 		return c.SendStatus(fiber.StatusUnauthorized)
// 	}

// 	return c.Next()
// }

func MigrateStockEntries(db *gorm.DB) {
	type StockEntry struct {
		ID                   uint  `gorm:"primaryKey"`
		ProductReceiptItemID *uint // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NULL ‡πÑ‡∏î‡πâ
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° column `product_receipt_item_id` ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á stock_entries
	if err := db.AutoMigrate(&StockEntry{}); err != nil {
		fmt.Printf("Failed to migrate StockEntry: %v\n", err)
		return
	}

	fmt.Println("Migration for StockEntry completed successfully.")
}

func UpdateStockEntriesWithReceiptItems(db *gorm.DB) {
	type StockEntry struct {
		ID                   uint `gorm:"primaryKey"`
		Quantity             int
		CostPerUnit          float64
		DeletedAt            gorm.DeletedAt
		ProductReceiptItemID *uint `gorm:"column:product_receipt_item_id"`
	}

	type ProductReceiptItem struct {
		ID        uint `gorm:"primaryKey"`
		Quantity  int
		UnitPrice float64
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• product_receipt_items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô map ‡πÄ‡∏û‡∏∑‡πà‡∏≠ lookup
	var productReceiptItems []ProductReceiptItem
	if err := db.Find(&productReceiptItems).Error; err != nil {
		fmt.Printf("Failed to fetch product_receipt_items: %v\n", err)
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô map ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ (quantity, unit_price) ‡πÄ‡∏õ‡πá‡∏ô key
	productReceiptItemMap := make(map[string]uint)
	for _, item := range productReceiptItems {
		key := fmt.Sprintf("%d-%.2f", item.Quantity, item.UnitPrice)
		productReceiptItemMap[key] = item.ID
	}

	// ‡∏î‡∏∂‡∏á stock_entries ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ product_receipt_item_id ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
	var stockEntries []StockEntry
	if err := db.Where("id >= ? AND product_receipt_item_id IS NULL AND deleted_at IS NULL", 404).
		Find(&stockEntries).Error; err != nil {
		fmt.Printf("Failed to fetch stock_entries: %v\n", err)
		return
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï product_receipt_item_id
	for _, entry := range stockEntries {
		key := fmt.Sprintf("%d-%.2f", entry.Quantity, entry.CostPerUnit)
		if receiptItemID, exists := productReceiptItemMap[key]; exists {
			// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock_entries ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö product_receipt_items
			if err := db.Model(&StockEntry{}).
				Where("id = ?", entry.ID).
				Update("product_receipt_item_id", receiptItemID).Error; err != nil {
				fmt.Printf("Failed to update stock_entry %d: %v\n", entry.ID, err)
			} else {
				fmt.Printf("Updated stock_entry %d with product_receipt_item_id %d\n", entry.ID, receiptItemID)
			}
		}
	}
}

// func MigrateStockEntrySoftDelete(db *gorm.DB) {
// 	type StockEntry struct {
// 		ID        uint `gorm:"primaryKey"`
// 		DeletedAt gorm.DeletedAt
// 	}

// 	if err := db.Model(&StockEntry{}).
// 		Where("id BETWEEN ? AND ?", 1, 397).
// 		Update("deleted_at", gorm.DeletedAt{Time: time.Now(), Valid: true}).Error; err != nil {
// 		fmt.Printf("Failed to update StockEntry records: %v\n", err)
// 		return
// 	}

//		fmt.Println("Soft delete applied successfully for StockEntry records with ID 1 to 397.")
//	}
// func MigrateStockEntrySoftDelete(db *gorm.DB) {
// 	// type StockEntry struct {
// 	// 	ID        uint `gorm:"primaryKey"`
// 	// 	ProductID uint
// 	// 	DeletedAt gorm.DeletedAt
// 	// }

// 	now := time.Now()

// 	// ‡πÉ‡∏ä‡πâ raw SQL ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ GORM ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö join ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô update
// 	if err := db.Exec(`
// 		UPDATE stock_entries
// 		SET deleted_at = ?
// 		WHERE id BETWEEN ? AND ?
// 		AND product_id NOT IN (
// 			SELECT id FROM products WHERE category_id = ?
// 		)
// 	`, now, 1, 403, 3).Error; err != nil {
// 		fmt.Printf("Failed to soft delete StockEntry records: %v\n", err)
// 		return
// 	}

// 	fmt.Println("Soft delete applied successfully for StockEntry records with ID 1 to 397 excluding category_id = 3.")
// }

func MigrateStockEntrySoftDeleteAndRecreate(db *gorm.DB) {
	now := time.Now()

	// Step 1: Soft delete ‡∏ó‡∏∏‡∏Å stock_entry ‡∏ó‡∏µ‡πà id <= 403
	if err := db.Exec(`
		UPDATE stock_entries
		SET deleted_at = ?
		WHERE id <= ?
	`, now, 403).Error; err != nil {
		fmt.Printf("‚ùå Failed to soft delete StockEntry records: %v\n", err)
		return
	}
	fmt.Println("‚úÖ Soft delete completed for stock_entries with ID <= 403.")

	// Step 2: ‡∏î‡∏∂‡∏á product_id ‡∏à‡∏≤‡∏Å products ‡∏ó‡∏µ‡πà‡∏°‡∏µ category_id = 3
	var productIDs []uint
	if err := db.Raw(`
		SELECT id FROM products WHERE category_id = ?
	`, 3).Scan(&productIDs).Error; err != nil {
		fmt.Printf("‚ùå Failed to fetch product_ids: %v\n", err)
		return
	}

	// Step 3: Insert ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ stock_entries
	type StockEntry struct {
		ProductID            uint
		StockLocationID      uint
		Quantity             int
		RemainingQty         int
		CostPerUnit          float64
		EntryDate            time.Time
		ProductReceiptItemID *uint
		CreatedAt            time.Time
		UpdatedAt            time.Time
	}

	var newEntries []StockEntry
	for _, productID := range productIDs {
		newEntries = append(newEntries, StockEntry{
			ProductID:            productID,
			StockLocationID:      1,
			Quantity:             999999,
			RemainingQty:         999999,
			CostPerUnit:          0,
			EntryDate:            now,
			ProductReceiptItemID: nil,
			CreatedAt:            now,
			UpdatedAt:            now,
		})
	}

	if len(newEntries) > 0 {
		if err := db.Table("stock_entries").Create(&newEntries).Error; err != nil {
			fmt.Printf("‚ùå Failed to create new StockEntry records: %v\n", err)
			return
		}
		fmt.Printf("‚úÖ Created %d new StockEntry records for category_id = 3.\n", len(newEntries))
	} else {
		fmt.Println("‚ö†Ô∏è No product_ids found for category_id = 3.")
	}
}

func MigrateProductReceiptProductReceiptItem() {
	db.Db.Migrator().DropTable(&model.ProductReceipt{}, &model.ProductReceiptItem{})
	fmt.Println("Dropped existing ProductReceipt and ProductReceiptItem tables.")

	err := db.Db.AutoMigrate(&model.ProductReceipt{}, &model.ProductReceiptItem{})
	if err != nil {
		log.Fatalf("Failed to migrate tables: %v", err)
	}
	fmt.Println("ProductReceipt and ProductReceiptItem tables migrated successfully.")
	// db.Db.AutoMigrate(&model.ProductReceipt{}, &model.ProductReceiptItem{})
	// fmt.Println("ProductReceipt ProductReceiptItem table migrated successfully")
	//
}

func MigrateSupplierProductReceiptProductReceiptItem() {
	db.Db.Migrator().DropTable(&model.Supplier{}, &model.ProductReceipt{}, &model.ProductReceiptItem{})

	db.Db.AutoMigrate(&model.Supplier{}, &model.ProductReceipt{}, &model.ProductReceiptItem{})
	fmt.Println("Supplier ProductReceipt ProductReceiptItem table migrated successfully")
}
func MigrateRoleHasPermission() {
	db.Db.AutoMigrate(&model.RoleHasPermission{})
	fmt.Println("role_has_permissions table migrated successfully")
}

func MigrateVisitation() {
	db.Db.AutoMigrate(&model.Visitation{})
	fmt.Println("visitations table migrated successfully")
}

func MigrateService(db *gorm.DB) {
	db.AutoMigrate(&model.Service{})
	fmt.Println("service table migrated successfully")
}
func MigrateStockLocation(db *gorm.DB) {
	db.AutoMigrate(&model.StockLocation{})
	fmt.Println("StockLocation table migrated successfully")
}
func MigrateStockEntry(db *gorm.DB) {
	db.AutoMigrate(&model.StockEntry{})
	fmt.Println("StockEntry table migrated successfully")
}

func MigrateSettingSystem(db *gorm.DB) {
	db.AutoMigrate(&model.SettingSystem{})
	fmt.Println("SettingSystem table migrated successfully")
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ migrate ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° product ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ô‡∏∏‡πä‡∏Å
func MigrateCategory() {
	db.Db.AutoMigrate(&model.Category{})
	fmt.Println("categories table migrated successfully")
}

func MigrateProduct(db *gorm.DB) {
	db.AutoMigrate(&model.Product{})
	fmt.Println("products table migrated successfully")

	// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° product ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	addProductIfNotExists := func(name, description, unit string, price float64, isSnookerTime bool, isActive bool, categoryID uint) {
		var product model.Product
		if err := db.Where("name = ?", name).First(&product).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				product := model.Product{
					Name:          name,
					Description:   description,
					Price:         price,
					Unit:          unit,
					IsSnookerTime: isSnookerTime,
					IsActive:      isActive,
					CategoryID:    categoryID,
				}
				db.Create(&product)
				fmt.Printf("%s product created successfully\n", name)
			} else {
				fmt.Printf("Error checking for %s product: %v\n", name, err)
			}
		} else {
			fmt.Printf("%s product already exists\n", name)
		}
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° Snooker Table Time ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	addProductIfNotExists(
		"‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏°",
		"-",
		"hour",
		0,    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å SettingTable
		true, // ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ô‡∏∏‡πä‡∏Å
		true,
		0,
	)

	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤", "-", "‡∏Ç‡∏ß‡∏î", 15, false, true, 1)
	addProductIfNotExists("‡∏™‡∏õ‡∏≠‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå", "-", "‡∏Ç‡∏ß‡∏î", 20, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÇ‡∏Ñ‡πâ‡∏Å (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÅ‡∏î‡∏á (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡∏™‡πâ‡∏° (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÅ‡∏õ‡πä‡∏ö‡∏ã‡∏µ‡πà (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡∏ä‡πÄ‡∏ß‡∏õ‡∏™‡πå‡∏°‡∏∞‡∏ô‡∏≤‡∏ß (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡∏™‡πÄ‡πÄ‡∏õ‡∏•‡∏ä", "-", "‡∏Ç‡∏ß‡∏î", 25, false, true, 1)
	addProductIfNotExists("‡πÑ‡∏ß‡∏ï‡∏≤‡∏°‡∏¥‡∏•", "-", "‡∏Ç‡∏ß‡∏î", 25, false, true, 1)
	addProductIfNotExists("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ‡πâ (‡πÅ‡∏î‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡πÄ‡∏ô‡∏™‡∏Å‡∏≤‡πÅ‡∏ü (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("C-vit", "-", "‡∏Ç‡∏ß‡∏î", 25, false, true, 1)
	addProductIfNotExists("M-150", "-", "‡∏Ç‡∏ß‡∏î", 20, false, true, 1)
	addProductIfNotExists("‡∏Å‡∏£‡∏∞‡∏ó‡∏¥‡∏á‡πÅ‡∏î‡∏á", "-", "‡∏Ç‡∏ß‡∏î", 20, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡∏°‡πà‡∏≠‡∏ô‡πÇ‡∏ã‡∏î‡∏≤ (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏Å‡∏≤‡πÅ‡∏ü‡∏ã‡∏≠‡∏á 3 in 1", "-", "‡∏ã‡∏≠‡∏á", 15, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡∏™‡πÑ‡∏õ‡∏£‡πå‡∏ó (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 25, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÇ‡∏≠‡∏≠‡∏¥‡∏ä‡∏¥ (‡πÄ‡∏•‡πá‡∏Å)", "-", "‡∏Ç‡∏ß‡∏î", 25, false, true, 1)
	addProductIfNotExists("‡∏ú‡πâ‡∏≤‡πÄ‡∏¢‡πá‡∏ô", "-", "‡∏ú‡∏∑‡∏ô", 20, false, true, 1)
	addProductIfNotExists("‡∏ä‡∏≤‡∏•‡∏¥‡∏õ‡∏ï‡∏±‡∏ô (‡∏Ç‡∏ß‡∏î)", "-", "‡∏Ç‡∏ß‡∏î", 25, false, true, 1)
	addProductIfNotExists("‡∏•‡∏¥‡∏õ‡πÇ‡∏û", "-", "‡∏Ç‡∏ß‡∏î", 20, false, true, 1)
	addProductIfNotExists("‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå ‡∏ã‡∏∏‡∏õ‡πÑ‡∏Å‡πà‡∏™‡∏Å‡∏±‡∏î", "-", "‡∏Ç‡∏ß‡∏î", 70, false, true, 1)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á", "-", "‡∏ñ‡∏∏‡∏á", 20, false, true, 1)
	addProductIfNotExists("‡πÇ‡∏à‡πä‡∏Å ‡∏°‡∏≤‡∏°‡πà‡∏≤", "-", "‡∏ñ‡πâ‡∏ß‡∏¢", 25, false, true, 4)
	addProductIfNotExists("‡∏Ç‡∏ô‡∏° 30 ‡∏ö‡∏≤‡∏ó", "-", "‡∏´‡πà‡∏≠", 30, false, true, 4)
	addProductIfNotExists("‡∏Ç‡∏ô‡∏° 10 ‡∏ö‡∏≤‡∏ó", "-", "‡∏´‡πà‡∏≠", 10, false, true, 4)
	addProductIfNotExists("‡πÄ‡∏°‡πá‡∏î‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á", "-", "‡∏´‡πà‡∏≠", 15, false, true, 4)
	addProductIfNotExists("‡∏õ‡∏•‡∏≤‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á, ‡∏õ‡∏•‡∏≤‡∏Å‡∏£‡∏≠‡∏ö, ‡πÅ‡∏´‡∏ô‡∏°", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 35, false, true, 4)
	addProductIfNotExists("‡πÑ‡∏™‡πâ‡∏Å‡∏£‡∏≠‡∏Å", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 50, false, true, 4)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏¥‡∏á‡∏´‡πå (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 50, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡πÇ‡∏≠ (‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á)", "-", "‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á", 50, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏¥‡∏á‡∏´‡πå (‡∏Ç‡∏ß‡∏î)", "-", "‡∏Ç‡∏ß‡∏î", 85, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡πÇ‡∏≠ (‡∏Ç‡∏ß‡∏î)", "-", "‡∏Ç‡∏ß‡∏î", 80, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏ä‡πâ‡∏≤‡∏á (‡∏Ç‡∏ß‡∏î)", "-", "‡∏Ç‡∏ß‡∏î", 80, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå Heineken", "-", "‡∏Ç‡∏ß‡∏î", 100, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏´‡∏•‡πâ‡∏≤ ‡∏´‡∏á‡∏©‡πå‡∏ó‡∏≠‡∏á", "-", "‡∏Ç‡∏ß‡∏î", 350, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏´‡∏•‡πâ‡∏≤ ‡πÅ‡∏™‡∏á‡πÇ‡∏™‡∏°", "-", "‡∏Ç‡∏ß‡∏î", 400, false, true, 2)
	addProductIfNotExists("‡πÄ‡∏´‡∏•‡πâ‡∏≤ BLEND 285", "-", "‡∏Ç‡∏ß‡∏î", 350, false, true, 2)
	addProductIfNotExists("‡∏£‡∏µ‡πÄ‡∏à‡∏ô‡∏ã‡∏µ‡πà (‡πÅ‡∏ö‡∏ô)", "-", "‡πÅ‡∏ö‡∏ô", 500, false, true, 2)
	addProductIfNotExists("‡πÇ‡∏ã‡∏î‡∏≤", "-", "‡∏Ç‡∏ß‡∏î", 20, false, true, 2)
	addProductIfNotExists("‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà", "-", "‡∏ã‡∏≠‡∏á", 100, false, true, 2)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß LP Dream", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 600, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏õ‡∏≤‡∏£‡∏µ‡∏™", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 200, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß Super Blue", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 150, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß V Pro", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 150, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß LP", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 180, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡∏Æ‡∏±‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 200, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡∏°‡∏≠‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 150, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡πÄ‡∏î‡∏≠‡∏∞‡∏ã‡∏±‡∏ô", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 150, false, true, 5)
	addProductIfNotExists("‡∏ä‡∏≠‡∏•‡πå‡∏Å‡∏ù‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡πÑ‡∏ó‡∏£‡πÅ‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡πâ‡∏•‡πÇ‡∏õ‡∏£", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 180, false, true, 5)
	addProductIfNotExists("‡∏ä‡∏≠‡∏•‡πå‡∏Å‡∏ù‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß NIR", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 220, false, true, 5)
	addProductIfNotExists("‡∏ä‡∏≠‡∏•‡πå‡∏Å‡∏ù‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 20, false, true, 5)
	addProductIfNotExists("‡∏ã‡∏≠‡∏á‡∏™‡∏ß‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πâ‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 80, false, true, 5)
	addProductIfNotExists("‡∏à‡∏∏‡∏Å‡∏¢‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏∏‡πà‡∏°", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 70, false, true, 5)
	addProductIfNotExists("‡∏à‡∏∏‡∏Å‡∏¢‡∏≤‡∏á‡∏ó‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 100, false, true, 5)
	addProductIfNotExists("‡∏ù‡∏≠‡∏¢‡∏Ç‡∏±‡∏î", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 20, false, true, 5)
	addProductIfNotExists("‡πÅ‡∏°‡πà‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÄ‡∏´‡∏ô‡πá‡∏ö‡∏ä‡∏≠‡∏•‡πå‡∏Å", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 450, false, true, 5)
	addProductIfNotExists("‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏≠‡∏•‡πå‡∏Å", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 150, false, true, 5)
	addProductIfNotExists("‡πÇ‡∏ß‡∏•‡πÄ‡∏Ñ‡πà‡∏ô‡∏Ñ‡∏•‡∏µ‡∏ô", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 260, false, true, 5)
	addProductIfNotExists("‡πÇ‡∏ß‡∏•‡πÄ‡∏Ñ‡πà‡∏ô‡πÅ‡∏ß‡πá‡∏Å‡∏ã‡πå", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 260, false, true, 5)
	addProductIfNotExists("‡πÇ‡∏ß‡∏•‡πÄ‡∏Ñ‡πà‡∏ô‡∏ü‡∏≤‡∏™", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 300, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß SPS", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 180, false, true, 5)
	addProductIfNotExists("‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏ß‡∏î", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 100, false, true, 5)
	addProductIfNotExists("‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 200, false, true, 5)
	addProductIfNotExists("‡∏ô‡πâ‡∏≥‡∏¢‡∏≤ A304", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 180, false, true, 5)
	addProductIfNotExists("‡∏™‡πÄ‡∏õ‡∏£‡∏¢‡πå ‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™‡∏°‡∏π‡∏ó", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 190, false, true, 5)
	addProductIfNotExists("‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡πÅ‡∏Ç‡πà‡∏á", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 1500, false, true, 5)
	addProductIfNotExists("‡∏ä‡∏≠‡∏•‡πå‡∏Å‡∏ù‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ATOM", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 750, false, true, 5)
	addProductIfNotExists("‡∏´‡∏±‡∏ß‡∏Ñ‡∏¥‡∏ß ‡∏ö‡∏•‡∏π‡∏≠‡∏±‡∏î", "-", "‡∏ä‡∏¥‡πâ‡∏ô", 140, false, true, 5)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π/‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏´‡∏°‡∏π‡∏ó‡∏≠‡∏î", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏¢‡∏≥‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏£‡∏≤‡∏î‡πÅ‡∏Å‡∏á", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß", "-", "‡∏ü‡∏≠‡∏á", 20, false, true, 3)
	addProductIfNotExists("‡πÄ‡∏ü‡∏£‡∏ô‡∏ä‡πå‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡πå", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Å‡πà‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏Å‡∏∞", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡πá‡∏ï‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏ú‡∏±‡∏î‡∏°‡∏≤‡∏°‡πà‡∏≤‡∏´‡∏°‡∏π", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏°‡∏π-‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏à‡∏≤‡∏ô ‡∏ñ‡πâ‡∏ß‡∏¢", "-", "‡∏ä‡∏∏‡∏î", 5, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏Å‡πà‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏Å‡∏∞", "-", "‡∏à‡∏≤‡∏ô", 95, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß", "-", "‡∏ü‡∏≠‡∏á", 25, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß/‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß", "-", "‡∏à‡∏≤‡∏ô", 45, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏´‡∏°‡∏π", "-", "‡∏à‡∏≤‡∏ô", 10, false, true, 3)
	addProductIfNotExists("‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 15, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏ú‡∏±‡∏î‡∏°‡∏≤‡∏°‡πà‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏¢‡∏≥‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡πÅ‡∏´‡∏ô‡∏°", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏¢‡∏≥‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏¢‡∏≥‡∏´‡∏°‡∏π‡∏¢‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏•‡∏≤‡∏ö‡∏´‡∏°‡∏π", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡∏ï‡∏∏‡πã‡∏ô", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏ï‡πâ‡∏°‡∏ä‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏ï‡∏µ‡∏ô‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á‡∏ó‡∏∞‡πÄ‡∏• ‡∏´‡∏°‡∏∂‡∏Å ‡∏Å‡∏∏‡πâ‡∏á", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏´‡∏°‡∏π ‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏™‡∏∏‡∏Å‡∏µ‡πâ‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡πÅ‡∏´‡∏ô‡∏°", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏´‡∏°‡∏π‡∏°‡∏∞‡∏ô‡∏≤‡∏ß", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏ú‡∏±‡∏î‡∏°‡∏≤‡∏°‡πà‡∏≤‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 20, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏õ‡∏•‡πà‡∏≤", "-", "‡∏à‡∏≤‡∏ô", 20, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏´‡∏°‡∏π", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 75, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏£‡∏≤‡∏î‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏´‡∏°‡∏π ‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏£‡∏≤‡∏î‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏´‡∏°‡∏π ‡πÑ‡∏Å‡πà", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 90, false, true, 3)
	addProductIfNotExists("‡∏û‡∏£‡∏¥‡∏Å‡πÅ‡∏Å‡∏á‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏à‡∏≤‡∏ô", 90, false, true, 3)
	addProductIfNotExists("‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏´‡∏° ‡πÑ‡∏Å‡πà ‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 80, false, true, 3)
	addProductIfNotExists("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 90, false, true, 3)
	addProductIfNotExists("‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 100, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡πÅ‡∏´‡∏ô‡∏°‡∏ã‡∏µ‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏´‡∏°‡∏π", "-", "‡∏à‡∏≤‡∏ô", 120, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏ó‡∏∞‡πÄ‡∏•", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö", "-", "‡∏ä‡∏≤‡∏°", 65, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏ó‡∏∞‡πÄ‡∏• - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠", "-", "‡∏ä‡∏≤‡∏°", 75, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡πÅ‡∏´‡∏ô‡∏°", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)
	addProductIfNotExists("‡∏Ç‡πâ‡∏≤‡∏ß‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©", "-", "‡∏à‡∏≤‡∏ô", 85, false, true, 3)

	// // ‡πÄ‡∏û‡∏¥‡πà‡∏° Food ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	// addProductIfNotExists(
	// 	"‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°",
	// 	"This product represents food&item items",
	// 	"item",
	// 	0,     // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0, ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
	// 	false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ô‡∏∏‡πä‡∏Å
	// )

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° Drink ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	// addProductIfNotExists(
	// 	"Drink",
	// 	"This product represents beverage items",
	// 	"item",
	// 	0,     // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0, ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ
	// 	false, // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ô‡∏∏‡πä‡∏Å
	// )
}

func MigrateSettingTable(db *gorm.DB) {
	db.AutoMigrate(&model.SettingTable{})
	fmt.Println("setting_tables table migrated successfully")
}

func MigrateDivision(db *gorm.DB) {
	db.AutoMigrate(&model.Division{})
	fmt.Println("divisions table migrated successfully")

	divisions := []struct {
		Division model.Division
	}{
		{
			Division: model.Division{
				Code: "01", MaxDigits: "000000", Name: "‡∏™‡∏≤‡∏Ç‡∏≤1", ShortName: "SOM1", Address: "420‡∏´‡∏°‡∏π‡πà1 ‡∏ï.‡∏ö‡∏≤‡∏á‡∏ö‡πà‡∏≠ ‡∏≠.‡∏ö‡∏≤‡∏á‡∏ö‡πà‡∏≠ ‡∏à.‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£ 10560", Tel: "0815936532", Line: "rain..2", Display: 1, Status: "active",
			},
		},
	}

	for _, item := range divisions {
		db.Create(&item.Division)
	}
	fmt.Println("Divisions data migrated successfully")
}

func MigrateRole() {
	db.Db.AutoMigrate(&model.Role{})
	fmt.Println("roles table migrated successfully")
}

func MigrateMenuAndPermissionData() {
	db.Db.AutoMigrate(&model.Menu{}, &model.Permission{})

	menusAndPermissions := []struct {
		Menu        model.Menu
		Permissions []model.Permission
	}{
		{
			Menu: model.Menu{
				Name: "‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô", Route: "/point-of-sale", Level: 0, HasSub: 0, Order: 1, Icon: "AttachMoneyIcon", IsActive: 1,
			},
			Permissions: []model.Permission{
				{
					Name: "point-of-sale-access", Title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
				},
				{
					Name: "point-of-sale-create", Title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "point-of-sale-edit", Title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "point-of-sale-delete", Title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", Route: "#", Level: 0, HasSub: 1, Order: 2, IsActive: 1,
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏ô‡∏∏‡πä‡∏Å", Route: "/setting-table", Level: 1, Relation: 2, HasSub: 0, Order: 1, Icon: "AppsIcon", IsActive: 1,
			},
			Permissions: []model.Permission{
				{
					Name: "setting-table-access", Title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
				},
				{
					Name: "setting-table-create", Title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "setting-table-edit", Title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "setting-table-delete", Title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤", Route: "/setting-timer", Level: 1, Relation: 2, HasSub: 0, Order: 2, Icon: "AlarmAddIcon", IsActive: 1,
			},
			Permissions: []model.Permission{
				{
					Name: "setting-timer-access", Title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
				},
				{
					Name: "setting-timer-create", Title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "setting-timer-edit", Title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "setting-timer-delete", Title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", Route: "#", Level: 0, HasSub: 1, Order: 3, IsActive: 1,
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", Route: "/users", Level: 1, Relation: 5, HasSub: 0, Order: 1, Icon: "ManageAccountsIcon", IsActive: 1,
			},
			Permissions: []model.Permission{
				{
					Name: "users-access", Title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
				},
				{
					Name: "users-create", Title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "users-edit", Title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "users-delete", Title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
			},
		},
		{
			Menu: model.Menu{
				Name: "‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", Route: "/roles", Level: 1, Relation: 5, HasSub: 0, Order: 2, Icon: "SecurityIcon", IsActive: 1,
			},
			Permissions: []model.Permission{
				{
					Name: "roles-access", Title: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á",
				},
				{
					Name: "roles-create", Title: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "roles-edit", Title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
				{
					Name: "roles-delete", Title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
				},
			},
		},
	}

	for _, item := range menusAndPermissions {
		// Hash the password before creating the user

		// Create employee
		db.Db.Create(&item.Menu)

		for i := range item.Permissions {
			item.Permissions[i].MenuID = item.Menu.ID
			db.Db.Create(&item.Permissions[i])
		}
	}
	fmt.Println("Menu And Permission data migrated successfully")
}

func MigrateEmployeeAndUserData() {
	// Migrate employee data
	db.Db.AutoMigrate(&model.Employee{}, &model.User{})

	// ‡πÉ‡∏ä‡πâ time.Format ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
	// Create sample employees and users
	employeesAndUsers := []struct {
		Employee model.Employee
		User     model.User
	}{
		{
			Employee: model.Employee{
				FirstName: "John", LastName: "Cena", NickName: "Johnny", Email: "john.cena@example.com", Telephone: "0123456789", DateOfJoining: time.Now().UTC().Truncate(24 * time.Hour), Status: "active",
			},
			User: model.User{
				Username: "john", Password: "hashed_password_1", DivisionID: 1, RoleID: 1,
			},
		},
		{
			Employee: model.Employee{
				FirstName: "Patchanok", LastName: "Arayasujin", NickName: "Rain", Email: "rainstep1607@gmail.com", Telephone: "0815936532", DateOfJoining: time.Now().UTC().Truncate(24 * time.Hour), Status: "active",
			},
			User: model.User{
				Username: "rain", Password: "1234", DivisionID: 1, RoleID: 1,
			},
		},
		{
			Employee: model.Employee{
				FirstName: "Dutchun", LastName: "Lastname", NickName: "Dutch", Email: "dutch@xample.com", Telephone: "0999999999", DateOfJoining: time.Now().UTC().Truncate(24 * time.Hour), Status: "active",
			},
			User: model.User{
				Username: "dutch", Password: "1234", DivisionID: 1, RoleID: 1,
			},
		},
		// Add more employee and user data as needed
	}

	for _, item := range employeesAndUsers {
		// Hash the password before creating the user
		hashedPassword, err := AuthController.HashPassword(item.User.Password)
		if err != nil {
			log.Fatal(err)
		}
		item.User.Password = hashedPassword

		// Create employee
		db.Db.Create(&item.Employee)

		// Create associated user
		item.User.EmployeeID = item.Employee.ID
		db.Db.Create(&item.User)
	}

	fmt.Println("Employee and User data migrated successfully")
}

// func MigrateEmployeeData() {
// 	// Migrate employee data
// 	db.Db.AutoMigrate(&model.Employee{})

// 	// Create sample employees
// 	employees := []model.Employee{
// 		{FirstName: "John", LastName: "Cena", NickName: "Johnny", Email: "john.cena@example.com", Telephone: "0123456789", Status: "Active", IsActive: 1},
// 		{FirstName: "Patchanok", LastName: "Arayasujin", NickName: "Rain", Email: "rainstep1607@gmail.com", Telephone: "0815936532", Status: "Active", IsActive: 1},
// 		{FirstName: "Dutchun", LastName: "Lastname", NickName: "Dutch", Email: "dutch@xample.com", Telephone: "0999999999", Status: "Active", IsActive: 1},
// 		// Add more employee data as needed
// 	}

// 	for _, employee := range employees {
// 		db.Db.Create(&employee)
// 	}

// 	fmt.Println("Employee data migrated successfully")
// }

// func MigrateUserData() {
// 	// Migrate user data
// 	db.Db.AutoMigrate(&model.User{})

// 	// Create sample users
// 	users := []model.User{
// 		{Username: "john", Password: "hashed_password_1", IsActive: 1, EmployeeID: 1},
// 		{Username: "rain", Password: "1234", IsActive: 1, EmployeeID: 2},
// 		{Username: "dutch", Password: "1234", IsActive: 1, EmployeeID: 3},
// 		// Add more user data as needed
// 	}

// 	for _, user := range users {
// 		// Hash the password before creating the user
// 		hashedPassword, err := AuthController.HashPassword(user.Password)
// 		if err != nil {
// 			log.Fatal(err)
// 		}
// 		user.Password = hashedPassword

// 		db.Db.Create(&user)
// 	}

// 	fmt.Println("User data migrated successfully")
// }
// func MigrateUserData() {
// 	// Migrate user data
// 	db.Db.AutoMigrate(&model.User{})

// 	// Create sample users
// 	users := []model.User{
// 		{Username: "user1", Password: "hashed_password_1", Fullname: "User One"},
// 		{Username: "user2", Password: "hashed_password_2", Fullname: "User Two"},
// 		{Username: "user3", Password: "hashed_password_3", Fullname: "User Three"},
// 		{Username: "dutchun", Password: "1234", Fullname: "Dutchun"},
// 		{Username: "rain", Password: "1234", Fullname: "Rain"},
// 	}

// 	for _, user := range users {
// 		// Hash the password before creating the user
// 		hashedPassword, err := AuthController.HashPassword(user.Password)
// 		if err != nil {
// 			log.Fatal(err)
// 		}
// 		user.Password = hashedPassword

// 		db.Db.Create(&user)
// 	}

// 	fmt.Println("User data migrated successfully")
// }

// func AddStockForProduct3(db *gorm.DB) error {
// 	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
// 	rounds := 5
// 	quantityPerRound := 10
// 	costPerUnit := 10.0 // ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢

// 	for i := 0; i < rounds; i++ {
// 		stockEntry := model.StockEntry{
// 			ProductID:       3, // product_id = 3
// 			StockLocationID: 1, // Main Stock ‡∏´‡∏£‡∏∑‡∏≠ stock ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
// 			Quantity:        quantityPerRound,
// 			CostPerUnit:     costPerUnit,
// 		}

// 		result := db.Create(&stockEntry)
// 		if result.Error != nil {
// 			return result.Error
// 		}

// 		fmt.Printf("Added %d units in round %d\n", quantityPerRound, i+1)
// 	}

//		return nil
//	}
func AddStockForProduct(db *gorm.DB) error {
	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• product ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô id 1 ‡πÅ‡∏•‡∏∞ id 2
	var products []model.Product
	if err := db.Where("id NOT IN ?", []int{1}).Find(&products).Error; err != nil {
		return fmt.Errorf("error fetching products: %v", err)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á stock entries ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ product ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
	for _, product := range products {
		stockEntry := model.StockEntry{
			ProductID:       product.ID,        // ‡∏î‡∏∂‡∏á id ‡∏Ç‡∏≠‡∏á product ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
			StockLocationID: 1,                 // Main Stock ‡∏´‡∏£‡∏∑‡∏≠ stock ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
			Quantity:        99999,             // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°
			CostPerUnit:     product.Price - 5, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å product ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡∏≠‡∏≠‡∏Å 5 ‡∏ö‡∏≤‡∏ó
			RemainingQty:    99999,
		}

		if stockEntry.CostPerUnit < 0 {
			stockEntry.CostPerUnit = 0 // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ CostPerUnit ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
		}

		if err := db.Create(&stockEntry).Error; err != nil {
			fmt.Printf("Error creating stock entry for product %s: %v\n", product.Name, err)
		} else {
			fmt.Printf("Stock entry created for product %s with cost per unit: %.2f\n", product.Name, stockEntry.CostPerUnit)
		}
	}

	return nil
}
